@using ProjectManager.DomainModel.Models;
@model PaginatedList<StudentDto>

@{
	ViewData["Title"] = "Index";
}

<div class="text-center">
	<h1 class="display-4">Welcome Student</h1>
</div>

<p>
	<a asp-action="Create">Create New</a>
</p>

<form asp-action="Index" method="get">
	<div class="form-actions no-color">
		<p>
			Find by: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
			<input type="submit" value="Search" class="btn btn-default" /> |
			<a asp-action="Index">Back to Full List</a>
		</p>
	</div>
</form>

@*Represent the data as a table from service*@
<table class="table table-striped">
	<thead>
		<tr>
			<th>Id</th>
			@*<th>Firstname</th>*@
			<th><a asp-action="Index" asp-route-sortOrder="@ViewData["FirstnameSortParm"]">Firstname</a></th>
			<th><a asp-action="Index" asp-route-sortOrder="@ViewData["LastnameSortParm"]">Lastname</a></th>
			@*<th>Lastname</th>k*@
			<th>Email</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var student in Model)
		{
			<tr>
				<td>@student.Id</td>
				<td>@student.Firstname</td>
				<td>@student.Lastname</td>
				<td>@student.Email</td>
				<td>
					<a asp-action="Edit" asp-route-id="@student.Id">Edit</a>
					<a asp-action="Delete" asp-route-id="@student.Id">Delete</a>
				</td>
			</tr>
		}
	</tbody>
</table>
@{
	var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
	var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
	Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
	Next
</a>
